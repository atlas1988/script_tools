diff --git a/Android.bp b/Android.bp
index f1580c3..3de88c8 100755
--- a/Android.bp
+++ b/Android.bp
@@ -243,6 +243,7 @@ java_library {
         "core/java/android/os/IUpdateLock.aidl",
         "core/java/android/os/IUserManager.aidl",
         "core/java/android/os/IVibratorService.aidl",
+        "core/java/android/os/IAlcoholService.aidl",
         "core/java/android/os/storage/IStorageManager.aidl",
         "core/java/android/os/storage/IStorageEventListener.aidl",
         "core/java/android/os/storage/IStorageShutdownObserver.aidl",
diff --git a/core/java/android/os/IAlcoholService.aidl b/core/java/android/os/IAlcoholService.aidl
new file mode 100755
index 0000000..fd99a54
--- /dev/null
+++ b/core/java/android/os/IAlcoholService.aidl
@@ -0,0 +1,26 @@
+/**
+ * Copyright (c) 2007, The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package android.os;  
+   
+interface IAlcoholService {  
+    void setVal(int val);  
+    float getVal();
+    int enable();
+	int disable();
+}
+
diff --git a/services/core/java/com/android/server/AlcoholService.java b/services/core/java/com/android/server/AlcoholService.java
new file mode 100755
index 0000000..1c16407
--- /dev/null
+++ b/services/core/java/com/android/server/AlcoholService.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+ package com.android.server;  
+ import android.content.Context;  
+ import android.os.IAlcoholService;  
+ import android.util.Slog;	
+ public class AlcoholService extends IAlcoholService.Stub {  
+	 private static final String TAG = "AlcoholService";	
+	 AlcoholService(Context context) {  
+		 init_native();  
+	 }	
+	 public void setVal(int val) {	
+		 setVal_native(val);  
+	 }	   
+	 public float getVal() {	
+		 return getVal_native();  
+	 }	
+	 public int enable() {	
+		 return enable_native();  
+	 }	
+	  public int disable() {	
+		 return disable_native();  
+	 }	
+	 private static native boolean init_native();  
+	 private static native void setVal_native(int val);  
+	 private static native float getVal_native();
+	 private static native int enable_native();
+	 private static native int disable_native();
+ }; 
+
+
diff --git a/services/core/jni/Android.bp b/services/core/jni/Android.bp
old mode 100644
new mode 100755
index 89efe12..6096b17
--- a/services/core/jni/Android.bp
+++ b/services/core/jni/Android.bp
@@ -49,6 +49,7 @@ cc_library_static {
         "com_android_server_VibratorService.cpp",
         "com_android_server_PersistentDataBlockService.cpp",
         "com_android_server_GraphicsStatsService.cpp",
+        "com_android_server_AlcoholService.cpp",
         "onload.cpp",
     ],
 
diff --git a/services/core/jni/com_android_server_AlcoholService.cpp b/services/core/jni/com_android_server_AlcoholService.cpp
new file mode 100755
index 0000000..c48aa26
--- /dev/null
+++ b/services/core/jni/com_android_server_AlcoholService.cpp
@@ -0,0 +1,117 @@
+/*
+ * Copyright (C) 2009 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+ 
+#define LOG_TAG "AlcoholService"  
+#include "jni.h"  
+#include <nativehelper/JNIHelp.h>
+#include "android_runtime/AndroidRuntime.h"  
+#include <utils/misc.h>  
+#include <utils/Log.h>  
+#include <hardware/hardware.h>  
+#include <hardware/alcohol.h>  
+#include <stdio.h>  
+  
+ namespace android	
+ {	
+	 /*在硬件抽象层中定义的硬件访问结构体，参考<hardware/alcohol.h>*/  
+		 struct alcohol_device_t* alcohol_device = NULL;  
+	 /*通过硬件抽象层定义的硬件访问接口设置硬件寄存器val的值*/  
+		 static void alcohol_setVal(JNIEnv* env, jobject clazz, jint value) {  
+		 int val = value;  
+		 ALOGI("Alcohol JNI: set value %d to device.", val);  
+		 if(!alcohol_device) {  
+			 ALOGI("Alcohol JNI: device is not open.");  
+			 return;  
+		 }	
+		   
+		 alcohol_device->set_val(alcohol_device, val);	
+	 }	
+		 /*通过硬件抽象层定义的硬件访问接口读取硬件寄存器val的值*/  
+	 static jfloat alcohol_getVal(JNIEnv* env, jobject clazz) {  
+		 float val = 0;
+		 int ret = 0;
+		 if(!alcohol_device) {  
+			 ALOGI("Alcohol JNI: device is not open.");  
+			 return val;  
+		 }	
+		 ret = alcohol_device->get_val(alcohol_device, &val);  
+		   
+		 ALOGI("Alcohol JNI: get value %f from device.ret =%d ", val,ret);  
+	   
+		 return val;  
+	 }
+	  /*通过硬件抽象层定义的硬件访问使能设备*/  
+	 static jint alcohol_enable(JNIEnv* env, jobject clazz) {  
+		 int ret = 0;  
+		 if(!alcohol_device) {  
+			 ALOGI("Alcohol JNI: device is not open.");  
+			 return ret;  
+		 }	
+		 ret = alcohol_device->enable(alcohol_device);  
+		   
+		 ALOGI("Alcohol JNI: enable device.ret = %d",ret);  
+	   
+		 return ret;  
+	 }
+	 /*通过硬件抽象层定义的硬件访问关闭设备*/  
+	 static jint alcohol_disable(JNIEnv* env, jobject clazz) {  
+		 int ret  = 0;  
+		 if(!alcohol_device) {  
+			 ALOGI("Alcohol JNI: device is not open.");  
+			 return ret;  
+		 }	
+		 ret = alcohol_device->disable(alcohol_device);  
+		   
+		 ALOGI("Alcohol JNI: disable device.");  
+	   
+		 return ret;  
+	 }
+		 /*通过硬件抽象层定义的硬件模块打开接口打开硬件设备*/  
+	 static inline int alcohol_device_open(const hw_module_t* module, struct alcohol_device_t** device) {  
+		 return module->methods->open(module, ALCOHOL_HARDWARE_MODULE_ID, (struct hw_device_t**)device);	
+	 }	
+		 /*通过硬件模块ID来加载指定的硬件抽象层模块并打开硬件*/  
+	 static jboolean alcohol_init(JNIEnv* env, jclass clazz) {  
+		 alcohol_module_t* module;  
+		   
+		 ALOGI("Alcohol JNI: initializing......");  
+		 if(hw_get_module(ALCOHOL_HARDWARE_MODULE_ID, (const struct hw_module_t**)&module) == 0) {  
+			 ALOGI("Alcohol JNI: alcohol Stub found.");	
+			 if(alcohol_device_open(&(module->common), &alcohol_device) == 0) {  
+				 ALOGI("Alcohol JNI: alcohol device is open.");	
+				 return 0;	
+			 }	
+			 ALOGE("Alcohol JNI: failed to open alcohol device.");  
+			 return -1;  
+		 }	
+		 ALOGE("Alcohol JNI: failed to get alcohol stub module.");  
+		 return -1; 	   
+	 }	
+		 /*JNI方法表*/  
+	 static const JNINativeMethod method_table[] = {  
+		 {"init_native", "()Z", (void*)alcohol_init},  
+		 {"setVal_native", "(I)V", (void*)alcohol_setVal},  
+		 {"getVal_native", "()F", (void*)alcohol_getVal},
+		 {"enable_native", "()I", (void*)alcohol_enable}, 
+		 {"disable_native", "()I", (void*)alcohol_disable}, 
+	 };  
+		 /*注册JNI方法*/  
+	 int register_android_server_AlcoholService(JNIEnv *env) {  
+			 return jniRegisterNativeMethods(env, "com/android/server/AlcoholService", method_table, NELEM(method_table));  
+	 }	
+ };
+
diff --git a/services/core/jni/onload.cpp b/services/core/jni/onload.cpp
old mode 100644
new mode 100755
index 0ebef37..adfab06
--- a/services/core/jni/onload.cpp
+++ b/services/core/jni/onload.cpp
@@ -40,6 +40,7 @@ int register_android_server_UsbMidiDevice(JNIEnv* env);
 int register_android_server_UsbHostManager(JNIEnv* env);
 int register_android_server_vr_VrManagerService(JNIEnv* env);
 int register_android_server_VibratorService(JNIEnv* env);
+int register_android_server_AlcoholService(JNIEnv *env);
 int register_android_server_location_GnssLocationProvider(JNIEnv* env);
 int register_android_server_connectivity_Vpn(JNIEnv* env);
 int register_android_server_connectivity_tethering_OffloadHardwareInterface(JNIEnv*);
@@ -87,6 +88,7 @@ extern "C" jint JNI_OnLoad(JavaVM* vm, void* /* reserved */)
     register_android_server_UsbHostManager(env);
     register_android_server_vr_VrManagerService(env);
     register_android_server_VibratorService(env);
+	register_android_server_AlcoholService(env);
     register_android_server_SystemServer(env);
     register_android_server_location_GnssLocationProvider(env);
     register_android_server_connectivity_Vpn(env);
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
old mode 100644
new mode 100755
index 56c297f..d583f3a
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -1442,6 +1442,13 @@ public final class SystemServer {
                 reportWtf("starting DiskStats Service", e);
             }
             traceEnd();
+			traceBeginAndSlog("StartAlcoholService");
+            try {
+                ServiceManager.addService("alcohol", new AlcoholService(context));
+            } catch (Throwable e) {
+                reportWtf("starting alcohol Service", e);
+            }
+            traceEnd();
 
             // timezone.RulesManagerService will prevent a device starting up if the chain of trust
             // required for safe time zone updates might be broken. RuleManagerService cannot do
